#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertex_color;
layout(location = 2) in float noise;
layout(location = 3) in vec3 tangent;

out vec3 fragmentColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform vec3 LightDirection_cameraspace;
 
void main(){
  // Output position of the vertex, in clip space : MVP * position
  gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
  
  float hair_radius = 0.08;
  vec3 sight_vec = vec3(0,0,1);
  //vec3 hair_center = vec3(0, 1.7, 0.1);

  vec3 H = vec3(0.6, 0.8, 0); // normalize(sight_vec + normalize(LightDirection_cameraspace));
  float nh = sqrt(1 - dot(tangent, H) * dot(tangent, H));


  float diffuse = max(0, 0.75 * nh + 0.25);
  float specular = 0.2 * vertex_color + noise;
  float color = diffuse + 0.1 * specular;

  //float color = min(0.8, vertex_color * (1.0-dot(vertexPosition_modelspace-hair_center, sight_vec)/hair_radius));
  //float color=vertex_color;
  fragmentColor = vec3(0.1 * color, 0.4 * color, 0.3 * color);

 // fragmentColor = vertex_color;
}